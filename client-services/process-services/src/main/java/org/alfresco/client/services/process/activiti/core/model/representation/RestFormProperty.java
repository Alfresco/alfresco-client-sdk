/**
 * Activiti REST API
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.alfresco.client.services.process.activiti.core.model.representation;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

/**
 * RestFormProperty
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-05-03T15:39:02.168+02:00")
public class RestFormProperty
{
    @SerializedName("id")
    private String id = null;

    @SerializedName("name")
    private String name = null;

    @SerializedName("type")
    private String type = null;

    @SerializedName("value")
    private String value = null;

    @SerializedName("readable")
    private Boolean readable = false;

    @SerializedName("writable")
    private Boolean writable = false;

    @SerializedName("required")
    private Boolean required = false;

    @SerializedName("datePattern")
    private String datePattern = null;

    @SerializedName("enumValues")
    private List<RestEnumFormProperty> enumValues = new ArrayList<RestEnumFormProperty>();

    /**
     * Get id
     * 
     * @return id
     **/
    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    /**
     * Get name
     * 
     * @return name
     **/
    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    /**
     * Get type
     * 
     * @return type
     **/
    public String getType()
    {
        return type;
    }

    public void setType(String type)
    {
        this.type = type;
    }

    /**
     * Get value
     * 
     * @return value
     **/
    public String getValue()
    {
        return value;
    }

    public void setValue(String value)
    {
        this.value = value;
    }

    /**
     * Get readable
     * 
     * @return readable
     **/
    public Boolean getReadable()
    {
        return readable;
    }

    public void setReadable(Boolean readable)
    {
        this.readable = readable;
    }

    /**
     * Get writable
     * 
     * @return writable
     **/
    public Boolean getWritable()
    {
        return writable;
    }

    public void setWritable(Boolean writable)
    {
        this.writable = writable;
    }

    /**
     * Get required
     * 
     * @return required
     **/
    public Boolean getRequired()
    {
        return required;
    }

    public void setRequired(Boolean required)
    {
        this.required = required;
    }

    /**
     * Get datePattern
     * 
     * @return datePattern
     **/
    public String getDatePattern()
    {
        return datePattern;
    }

    public void setDatePattern(String datePattern)
    {
        this.datePattern = datePattern;
    }

    /**
     * Get enumValues
     * 
     * @return enumValues
     **/
    public List<RestEnumFormProperty> getEnumValues()
    {
        return enumValues;
    }

    public void setEnumValues(List<RestEnumFormProperty> enumValues)
    {
        this.enumValues = enumValues;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o) { return true; }
        if (o == null || getClass() != o.getClass()) { return false; }
        RestFormProperty restFormProperty = (RestFormProperty) o;
        return Objects.equals(this.id, restFormProperty.id) && Objects.equals(this.name, restFormProperty.name)
                && Objects.equals(this.type, restFormProperty.type)
                && Objects.equals(this.value, restFormProperty.value)
                && Objects.equals(this.readable, restFormProperty.readable)
                && Objects.equals(this.writable, restFormProperty.writable)
                && Objects.equals(this.required, restFormProperty.required)
                && Objects.equals(this.datePattern, restFormProperty.datePattern)
                && Objects.equals(this.enumValues, restFormProperty.enumValues);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(id, name, type, value, readable, writable, required, datePattern, enumValues);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class RestFormProperty {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("    readable: ").append(toIndentedString(readable)).append("\n");
        sb.append("    writable: ").append(toIndentedString(writable)).append("\n");
        sb.append("    required: ").append(toIndentedString(required)).append("\n");
        sb.append("    datePattern: ").append(toIndentedString(datePattern)).append("\n");
        sb.append("    enumValues: ").append(toIndentedString(enumValues)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null) { return "null"; }
        return o.toString().replace("\n", "\n    ");
    }
}
