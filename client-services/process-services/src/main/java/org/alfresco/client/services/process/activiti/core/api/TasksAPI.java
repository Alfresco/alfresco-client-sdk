package org.alfresco.client.services.process.activiti.core.api;

import static org.alfresco.client.services.process.activiti.core.ActivitiConstant.ACTIVITI_SERVICE_PATH;

import java.util.Map;

import org.alfresco.client.services.process.activiti.core.model.body.AttachmentResponse;

import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.http.*;

/**
 * Created by jpascal on 03/05/2017.
 */
public interface TasksAPI
{

    /**
     * Create a new attachment on a task, containing a link to an external
     * resource or an attached file ## Create a new attachment on a task,
     * containing a link to an external resource &#x60;&#x60;&#x60;JSON {
     * \&quot;name\&quot;:\&quot;Simple attachment\&quot;,
     * \&quot;description\&quot;:\&quot;Simple attachment description\&quot;,
     * \&quot;type\&quot;:\&quot;simpleType\&quot;,
     * \&quot;externalUrl\&quot;:\&quot;http://activiti.org\&quot; }
     * &#x60;&#x60;&#x60; Only the attachment name is required to create a new
     * attachment. ## Create a new attachment on a task, with an attached file
     * The request should be of type multipart/form-data. There should be a
     * single file-part included with the binary value of the variable. On top
     * of that, the following additional form-fields can be present: - *name*:
     * Required name of the variable. - *description*: Description of the
     * attachment, optional. - *type*: Type of attachment, optional. Supports
     * any arbitrary string or a valid HTTP content-type.
     * 
     * @param taskId The id of the task to create the attachment for. (required)
     * @return AttachmentResponse
     */
    @Multipart
    @GET(ACTIVITI_SERVICE_PATH + "/runtime/tasks/{taskId}/attachments")
    Call<AttachmentResponse> createAttachmentCall(@Path("taskId") String taskId, @Part("filedata") RequestBody file);

    @Multipart
    @GET(ACTIVITI_SERVICE_PATH + "/runtime/tasks/{taskId}/attachments")
    Call<AttachmentResponse> createAttachmentCall(@Path("taskId") String taskId,
            @PartMap() Map<String, RequestBody> partMap);

    /**
     * Get engine properties
     *
     * @return Map&lt;String, String&gt;
     */
    @GET(ACTIVITI_SERVICE_PATH + "/management/properties")
    Call<Map<String, String>> getPropertiesCall();

    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////////////
}
