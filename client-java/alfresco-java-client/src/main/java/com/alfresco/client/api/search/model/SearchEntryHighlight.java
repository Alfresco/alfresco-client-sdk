/**
 * Alfresco Content Services REST API
 * **Search API**  Provides access to the search features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.alfresco.client.api.search.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

/**
 * SearchEntryHighlight
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-26T16:18:20.726+02:00")
public class SearchEntryHighlight
{
    @SerializedName("field")
    private String field = null;

    @SerializedName("snippets")
    private List<String> snippets = new ArrayList<String>();

    public SearchEntryHighlight field(String field)
    {
        this.field = field;
        return this;
    }

    /**
     * The field where a match occured (one of the fields defined on the
     * request)
     * 
     * @return field
     **/
    public String getField()
    {
        return field;
    }

    public void setField(String field)
    {
        this.field = field;
    }

    public SearchEntryHighlight snippets(List<String> snippets)
    {
        this.snippets = snippets;
        return this;
    }

    public SearchEntryHighlight addSnippetsItem(String snippetsItem)
    {
        this.snippets.add(snippetsItem);
        return this;
    }

    /**
     * Any number of snippets for the specified field highlighting the matching
     * text
     * 
     * @return snippets
     **/
    public List<String> getSnippets()
    {
        return snippets;
    }

    public void setSnippets(List<String> snippets)
    {
        this.snippets = snippets;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o) { return true; }
        if (o == null || getClass() != o.getClass()) { return false; }
        SearchEntryHighlight searchEntryHighlight = (SearchEntryHighlight) o;
        return Objects.equals(this.field, searchEntryHighlight.field)
                && Objects.equals(this.snippets, searchEntryHighlight.snippets);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(field, snippets);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class SearchEntryHighlight {\n");

        sb.append("    field: ").append(toIndentedString(field)).append("\n");
        sb.append("    snippets: ").append(toIndentedString(snippets)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null) { return "null"; }
        return o.toString().replace("\n", "\n    ");
    }
}
