swagger: '2.0'
info:
  description: Provides access to the Authentication features of Alfresco
  version: '1'
  title: Alfresco Authentication REST API
basePath: /alfresco/api/-default-/public/authentication/versions/1
securityDefinitions:
  basicAuth:
    type: basic
    description: HTTP Basic Authentication
security:
  - basicAuth: []
consumes:
  - application/json
produces:
  - application/json
paths:
  '/tickets':
    post:
      tags:
        - authentication
      summary: Create ticket (login)
      description: |
        Logs in and returns the new authentication ticket.
        The userId and password properties are mandatory in the request body. For example:
        ```JSON
        {
            "userId": "jbloggs",
            "password": "password"
        }
        ```
        To use the ticket in future requests you should pass it in the request header.
        For example using Javascript:
          ```Javascript
            request.setRequestHeader ("Authorization", "Basic " + btoa(ticket));
          ```
      operationId: createTicket
      parameters:
        - in: body
          name: loginRequest
          description: The user credential.
          required: true
          schema:
            properties:
              userId:
                type: string
              password:
                type: string
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '201':
          description: Successful response
          schema:
            $ref: '#/definitions/LoginTicketEntry'
        '400':
          description: If the **userId** and/or **password** are/is not provided
        '403':
          description: If the login fails
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/tickets/-me-':
    get:
      tags:
        - authentication
      summary: Validate ticket
      description: |
        Validates the specified ticket (derived from Authorization header) is still valid.

        For example, you can pass the Authorization request header using Javascript:
          ```Javascript
            request.setRequestHeader ("Authorization", "Basic " + btoa(ticket));
          ```
      operationId: validateTicket
      produces:
        - application/json
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ValidateTicketEntry'
        '400':
          description: If the URL path does not include **-me-** or the ticket is not provided by the Authorization header
        '404':
          description: If the status of the user has changed (e.g. The user is locked or the account is disabled) or the ticket has expired
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - authentication
      summary: Delete ticket (logout)
      description: |
        Deletes logged in ticket (logout).
      operationId: deleteTicket
      responses:
        '204':
          description: Successful response
        '400':
          description: If the URL path does not include **-me-** or the ticket is not provided by the Authorization header
        '404':
          description: If the status of the user has changed (e.g. The user is locked or the account is disabled) or the ticket has expired
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Error:
    type: object
    required:
      - error
    properties:
      error:
        type: object
        required:
          - statusCode
          - briefSummary
          - stackTrace
          - descriptionURL
        properties:
          errorKey:
            type: string
          statusCode:
            type: integer
            format: int32
          briefSummary:
            type: string
          stackTrace:
            type: string
          descriptionURL:
            type: string
          logId:
            type: string
  LoginTicketEntry:
    type: object
    properties:
      entry:
        type: object
        properties:
          id:
            type: string
          userId:
            type: string
  ValidateTicketEntry:
    type: object
    properties:
      entry:
        type: object
        properties:
          id:
            type: string